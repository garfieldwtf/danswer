version: '3.8'

services:
  api_server:
    image: danswer/danswer-backend:${IMAGE_TAG:-latest}
    build:
      context: ../../backend
      dockerfile: Dockerfile
    command: >
      /bin/sh -c "alembic upgrade head &&
      echo \"Starting Danswer Api Server\" &&
      uvicorn danswer.main:app --host 0.0.0.0 --port 8080"
    depends_on:
      - relational_db
      - index
      - cache
      - inference_model_server
    restart: always
    environment:
      - AUTH_TYPE=${AUTH_TYPE:-BASIC}
      - SESSION_EXPIRE_TIME_SECONDS=${SESSION_EXPIRE_TIME_SECONDS:-}
      - ENCRYPTION_KEY_SECRET=${ENCRYPTION_KEY_SECRET:-}
      - VALID_EMAIL_DOMAINS=${VALID_EMAIL_DOMAINS:-}
      - GOOGLE_OAUTH_CLIENT_ID=${GOOGLE_OAUTH_CLIENT_ID:-}
      - GOOGLE_OAUTH_CLIENT_SECRET=${GOOGLE_OAUTH_CLIENT_SECRET:-}
      - REQUIRE_EMAIL_VERIFICATION=${REQUIRE_EMAIL_VERIFICATION:-}
      - SMTP_SERVER=${SMTP_SERVER:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASS=${SMTP_PASS:-}
      - ENABLE_EMAIL_INVITES=${ENABLE_EMAIL_INVITES:-}
      - EMAIL_FROM=${EMAIL_FROM:-}
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID:-}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET:-}
      - OPENID_CONFIG_URL=${OPENID_CONFIG_URL:-}
      - TRACK_EXTERNAL_IDP_EXPIRY=${TRACK_EXTERNAL_IDP_EXPIRY:-}
      - CORS_ALLOWED_ORIGIN=${CORS_ALLOWED_ORIGIN:-}
      - GEN_AI_MAX_TOKENS=${GEN_AI_MAX_TOKENS:-}
      - QA_TIMEOUT=${QA_TIMEOUT:-}
      - MAX_CHUNKS_FED_TO_CHAT=${MAX_CHUNKS_FED_TO_CHAT:-}
      - DISABLE_LLM_CHOOSE_SEARCH=${DISABLE_LLM_CHOOSE_SEARCH:-}
      - DISABLE_LLM_QUERY_REPHRASE=${DISABLE_LLM_QUERY_REPHRASE:-}
      - DISABLE_GENERATIVE_AI=${DISABLE_GENERATIVE_AI:-}
      - DISABLE_LITELLM_STREAMING=${DISABLE_LITELLM_STREAMING:-}
      - LITELLM_EXTRA_HEADERS=${LITELLM_EXTRA_HEADERS:-}
      - BING_API_KEY=${BING_API_KEY:-}
      - DISABLE_LLM_DOC_RELEVANCE=${DISABLE_LLM_DOC_RELEVANCE:-}
      - TOKEN_BUDGET_GLOBALLY_ENABLED=${TOKEN_BUDGET_GLOBALLY_ENABLED:-}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION_NAME=${AWS_REGION_NAME:-}
      - DOC_TIME_DECAY=${DOC_TIME_DECAY:-}
      - HYBRID_ALPHA=${HYBRID_ALPHA:-}
      - EDIT_KEYWORD_QUERY=${EDIT_KEYWORD_QUERY:-}
      - MULTILINGUAL_QUERY_EXPANSION=${MULTILINGUAL_QUERY_EXPANSION:-}
      - LANGUAGE_HINT=${LANGUAGE_HINT:-}
      - LANGUAGE_CHAT_NAMING_HINT=${LANGUAGE_CHAT_NAMING_HINT:-}
      - QA_PROMPT_OVERRIDE=${QA_PROMPT_OVERRIDE:-}
      - POSTGRES_HOST=relational_db
      - POSTGRES_DEFAULT_SCHEMA=${POSTGRES_DEFAULT_SCHEMA:-}
      - VESPA_HOST=index
      - REDIS_HOST=cache
      - WEB_DOMAIN=${WEB_DOMAIN:-}
      - EMBEDDING_BATCH_SIZE=${EMBEDDING_BATCH_SIZE:-}
      - DOCUMENT_ENCODER_MODEL=${DOCUMENT_ENCODER_MODEL:-}
      - DOC_EMBEDDING_DIM=${DOC_EMBEDDING_DIM:-}
      - NORMALIZE_EMBEDDINGS=${NORMALIZE_EMBEDDINGS:-}
      - ASYM_QUERY_PREFIX=${ASYM_QUERY_PREFIX:-}
      - DISABLE_RERANK_FOR_STREAMING=${DISABLE_RERANK_FOR_STREAMING:-}
      - MODEL_SERVER_HOST=${MODEL_SERVER_HOST:-inference_model_server}
      - MODEL_SERVER_PORT=${MODEL_SERVER_PORT:-}
      - DISABLE_TELEMETRY=${DISABLE_TELEMETRY:-}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_ALL_MODEL_INTERACTIONS=${LOG_ALL_MODEL_INTERACTIONS:-}
      - LOG_DANSWER_MODEL_INTERACTIONS=${LOG_DANSWER_MODEL_INTERACTIONS:-}
      - LOG_VESPA_TIMING_INFORMATION=${LOG_VESPA_TIMING_INFORMATION:-}
      - LOG_ENDPOINT_LATENCY=${LOG_ENDPOINT_LATENCY:-}
      - LOG_POSTGRES_LATENCY=${LOG_POSTGRES_LATENCY:-}
      - LOG_POSTGRES_CONN_COUNTS=${LOG_POSTGRES_CONN_COUNTS:-}
      - CELERY_BROKER_POOL_LIMIT=${CELERY_BROKER_POOL_LIMIT:-}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - HARD_DELETE_CHATS=${HARD_DELETE_CHATS:-}
      - ENABLE_PAID_ENTERPRISE_EDITION_FEATURES=${ENABLE_PAID_ENTERPRISE_EDITION_FEATURES:-false}
      - API_KEY_HASH_ROUNDS=${API_KEY_HASH_ROUNDS:-}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dcms.tls=true"
      - "traefik.http.routers.dcms.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dcms.rule=Host(`api.danswer.garf.us`)"
      - "traefik.http.routers.dcms.entrypoints=web,websecure"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"
    networks:
      - websites

  background:
    image: danswer/danswer-backend:${IMAGE_TAG:-latest}
    build:
      context: ../../backend
      dockerfile: Dockerfile
    command: /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
    depends_on:
      - relational_db
      - index
      - cache
      - inference_model_server
      - indexing_model_server
    restart: always
    environment:
      ENCRYPTION_KEY_SECRET: ${ENCRYPTION_KEY_SECRET:-}
      GEN_AI_MAX_TOKENS: ${GEN_AI_MAX_TOKENS:-}
      QA_TIMEOUT: ${QA_TIMEOUT:-}
      MAX_CHUNKS_FED_TO_CHAT: ${MAX_CHUNKS_FED_TO_CHAT:-}
      DISABLE_LLM_CHOOSE_SEARCH: ${DISABLE_LLM_CHOOSE_SEARCH:-}
      DISABLE_LLM_QUERY_REPHRASE: ${DISABLE_LLM_QUERY_REPHRASE:-}
      DISABLE_GENERATIVE_AI: ${DISABLE_GENERATIVE_AI:-}
      GENERATIVE_MODEL_ACCESS_CHECK_FREQ: ${GENERATIVE_MODEL_ACCESS_CHECK_FREQ:-}
      DISABLE_LITELLM_STREAMING: ${DISABLE_LITELLM_STREAMING:-}
      LITELLM_EXTRA_HEADERS: ${LITELLM_EXTRA_HEADERS:-}
      BING_API_KEY: ${BING_API_KEY:-}
      DOC_TIME_DECAY: ${DOC_TIME_DECAY:-}
      HYBRID_ALPHA: ${HYBRID_ALPHA:-}
      EDIT_KEYWORD_QUERY: ${EDIT_KEYWORD_QUERY:-}
      MULTILINGUAL_QUERY_EXPANSION: ${MULTILINGUAL_QUERY_EXPANSION:-}
      LANGUAGE_HINT: ${LANGUAGE_HINT:-}
      LANGUAGE_CHAT_NAMING_HINT: ${LANGUAGE_CHAT_NAMING_HINT:-}
      QA_PROMPT_OVERRIDE: ${QA_PROMPT_OVERRIDE:-}
      POSTGRES_HOST: relational_db
      POSTGRES_USER: ${POSTGRES_USER:-}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-}
      POSTGRES_DB: ${POSTGRES_DB:-}
      POSTGRES_DEFAULT_SCHEMA: ${POSTGRES_DEFAULT_SCHEMA:-}
      VESPA_HOST: index
      REDIS_HOST: cache
      WEB_DOMAIN: ${WEB_DOMAIN:-}
      DOCUMENT_ENCODER_MODEL: ${DOCUMENT_ENCODER_MODEL:-}
      DOC_EMBEDDING_DIM: ${DOC_EMBEDDING_DIM:-}
      NORMALIZE_EMBEDDINGS: ${NORMALIZE_EMBEDDINGS:-}
      ASYM_QUERY_PREFIX: ${ASYM_QUERY_PREFIX:-}
      ASYM_PASSAGE_PREFIX: ${ASYM_PASSAGE_PREFIX:-}
      MODEL_SERVER_HOST: ${MODEL_SERVER_HOST:-inference_model_server}
      MODEL_SERVER_PORT: ${MODEL_SERVER_PORT:-}
      INDEXING_MODEL_SERVER_HOST: ${INDEXING_MODEL_SERVER_HOST:-indexing_model_server}
      VESPA_SEARCHER_THREADS: ${VESPA_SEARCHER_THREADS:-}
      NUM_INDEXING_WORKERS: ${NUM_INDEXING_WORKERS:-}
      ENABLED_CONNECTOR_TYPES: ${ENABLED_CONNECTOR_TYPES:-}
      DISABLE_INDEX_UPDATE_ON_SWAP: ${DISABLE_INDEX_UPDATE_ON_SWAP:-}
      DASK_JOB_CLIENT_ENABLED: ${DASK_JOB_CLIENT_ENABLED:-}
      CONTINUE_ON_CONNECTOR_FAILURE: ${CONTINUE_ON_CONNECTOR_FAILURE:-}
      EXPERIMENTAL_CHECKPOINTING_ENABLED: ${EXPERIMENTAL_CHECKPOINTING_ENABLED:-}
      CONFLUENCE_CONNECTOR_LABELS_TO_SKIP: ${CONFLUENCE_CONNECTOR_LABELS_TO_SKIP:-}
      JIRA_CONNECTOR_LABELS_TO_SKIP: ${JIRA_CONNECTOR_LABELS_TO_SKIP:-}
      WEB_CONNECTOR_VALIDATE_URLS: ${WEB_CONNECTOR_VALIDATE_URLS:-}
      JIRA_API_VERSION: ${JIRA_API_VERSION:-}
      GONG_CONNECTOR_START_TIME: ${GONG_CONNECTOR_START_TIME:-}
      NOTION_CONNECTOR_ENABLE_RECURSIVE_PAGE_LOOKUP: ${NOTION_CONNECTOR_ENABLE_RECURSIVE_PAGE_LOOKUP:-}
      GITHUB_CONNECTOR_BASE_URL: ${GITHUB_CONNECTOR_BASE_URL:-}
      CELERY_WORKER_INDEXING_CONCURRENCY: ${CELERY_WORKER_INDEXING_CONCURRENCY:-}
      CELERY_WORKER_LIGHT_CONCURRENCY: ${CELERY_WORKER_LIGHT_CONCURRENCY:-}
      CELERY_WORKER_LIGHT_PREFETCH_MULTIPLIER: ${CELERY_WORKER_LIGHT_PREFETCH_MULTIPLIER:-}
      DANSWER_BOT_SLACK_APP_TOKEN: ${DANSWER_BOT_SLACK_APP_TOKEN:-}
      DANSWER_BOT_SLACK_BOT_TOKEN: ${DANSWER_BOT_SLACK_BOT_TOKEN:-}
      DANSWER_BOT_DISABLE_DOCS_ONLY_ANSWER: ${DANSWER_BOT_DISABLE_DOCS_ONLY_ANSWER:-}
      DANSWER_BOT_FEEDBACK_VISIBILITY: ${DANSWER_BOT_FEEDBACK_VISIBILITY:-}
      DANSWER_BOT_DISPLAY_ERROR_MSGS: ${DANSWER_BOT_DISPLAY_ERROR_MSGS:-}
      DANSWER_BOT_RESPOND_EVERY_CHANNEL: ${DANSWER_BOT_RESPOND_EVERY_CHANNEL:-}
      DANSWER_BOT_DISABLE_COT: ${DANSWER_BOT_DISABLE_COT:-}
      NOTIFY_SLACKBOT_NO_ANSWER: ${NOTIFY_SLACKBOT_NO_ANSWER:-}
      DANSWER_BOT_MAX_QPM: ${DANSWER_BOT_MAX_QPM:-}
      DANSWER_BOT_MAX_WAIT_TIME: ${DANSWER_BOT_MAX_WAIT_TIME:-}
      DISABLE_TELEMETRY: ${DISABLE_TELEMETRY:-}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_ALL_MODEL_INTERACTIONS: ${LOG_ALL_MODEL_INTERACTIONS:-}
      LOG_DANSWER_MODEL_INTERACTIONS: ${LOG_DANSWER_MODEL_INTERACTIONS:-}
      LOG_VESPA_TIMING_INFORMATION: ${LOG_VESPA_TIMING_INFORMATION:-}
      SENTRY_DSN: ${SENTRY_DSN:-}
      ENABLE_PAID_ENTERPRISE_EDITION_FEATURES: ${ENABLE_PAID_ENTERPRISE_EDITION_FEATURES:-false}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"
    networks:
      - websites

  web_server:
    image: danswer/danswer-web-server:${IMAGE_TAG:-latest}
    build:
      context: ../../web
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_DISABLE_STREAMING=${NEXT_PUBLIC_DISABLE_STREAMING:-false}
        - NEXT_PUBLIC_NEW_CHAT_DIRECTS_TO_SAME_PERSONA=${NEXT_PUBLIC_NEW_CHAT_DIRECTS_TO_SAME_PERSONA:-false}
        - NEXT_PUBLIC_POSITIVE_PREDEFINED_FEEDBACK_OPTIONS=${NEXT_PUBLIC_POSITIVE_PREDEFINED_FEEDBACK_OPTIONS:-}
        - NEXT_PUBLIC_NEGATIVE_PREDEFINED_FEEDBACK_OPTIONS=${NEXT_PUBLIC_NEGATIVE_PREDEFINED_FEEDBACK_OPTIONS:-}
        - NEXT_PUBLIC_DISABLE_LOGOUT=${NEXT_PUBLIC_DISABLE_LOGOUT:-}
        - NEXT_PUBLIC_DEFAULT_SIDEBAR_OPEN=${NEXT_PUBLIC_DEFAULT_SIDEBAR_OPEN:-}
    depends_on:
      - api_server
    restart: always
    environment:
      - INTERNAL_URL=http://api_server:8080
      - WEB_DOMAIN=${WEB_DOMAIN:-}
      - THEME_IS_DARK=${THEME_IS_DARK:-}
      - DISABLE_LLM_DOC_RELEVANCE=${DISABLE_LLM_DOC_RELEVANCE:-}
      - ENABLE_PAID_ENTERPRISE_EDITION_FEATURES=${ENABLE_PAID_ENTERPRISE_EDITION_FEATURES:-false}
      - NEXT_PUBLIC_CUSTOM_REFRESH_URL=${NEXT_PUBLIC_CUSTOM_REFRESH_URL:-}
    networks:
      - websites

  inference_model_server:
    image: danswer/danswer-model-server:${IMAGE_TAG:-latest}
    build:
      context: ../../backend
      dockerfile: Dockerfile.model_server
    command: >
      /bin/sh -c "if [ \"${DISABLE_MODEL_SERVER:-false}\" = \"True\" ]; then
        echo 'Skipping service...';
        exit 0;
      else
        exec uvicorn model_server.main:app --host 0.0.0.0 --port 9000;
      fi"
    restart: on-failure
    environment:
      - MIN_THREADS_ML_MODELS=${MIN_THREADS_ML_MODELS:-}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SENTRY_DSN=${SENTRY_DSN:-}
    volumes:
      - model_cache_huggingface:/root/.cache/huggingface/
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"
    networks:
      - websites

  indexing_model_server:
    image: danswer/danswer-model-server:${IMAGE_TAG:-latest}
    build:
      context: ../../backend
      dockerfile: Dockerfile.model_server
    command: >
      /bin/sh -c "if [ \"${DISABLE_MODEL_SERVER:-false}\" = \"True\" ]; then
        echo 'Skipping service...';
        exit 0;
      else
        exec uvicorn model_server.main:app --host 0.0.0.0 --port 9000;
      fi"
    restart: on-failure
    environment:
      - INDEX_BATCH_SIZE=${INDEX_BATCH_SIZE:-}
      - MIN_THREADS_ML_MODELS=${MIN_THREADS_ML_MODELS:-}
      - INDEXING_ONLY=True
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CLIENT_EMBEDDING_TIMEOUT=${CLIENT_EMBEDDING_TIMEOUT:-}
      - SENTRY_DSN=${SENTRY_DSN:-}
    volumes:
      - indexing_huggingface_model_cache:/root/.cache/huggingface/
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"
    networks:
      - websites

  relational_db:
    image: postgres:15.2-alpine
    command: -c 'max_connections=250'
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
#    ports:
#      - "5432:5432"
    volumes:
      - db_volume:/var/lib/postgresql/data
    networks:
      - websites

  index:
    image: vespaengine/vespa:8.277.17
    restart: always
#    ports:
#      - "19071:19071"
#      - "8081:8081"
    volumes:
      - vespa_volume:/opt/vespa/var
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"
    networks:
      - websites

  nginx:
    image: nginx:1.23.4-alpine
    restart: always
    depends_on:
      - api_server
      - web_server
    environment:
      - DOMAIN=localhost
    volumes:
      - ../data/nginx:/etc/nginx/conf.d
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dcms.tls=true"
      - "traefik.http.routers.dcms.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dcms.rule=Host(`danswer.garf.us`)"
      - "traefik.http.routers.dcms.entrypoints=web,websecure"
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "6"
    command: >
      /bin/sh -c "dos2unix /etc/nginx/conf.d/run-nginx.sh 
      && /etc/nginx/conf.d/run-nginx.sh app.conf.template.dev"
    networks:
      - websites

  cache:
    image: redis:7.4-alpine
    restart: always
    command: redis-server --save "" --appendonly no
    networks:
      - websites

volumes:
  db_volume:
  vespa_volume:
  model_cache_huggingface:
  indexing_huggingface_model_cache:

networks:
  websites:
    external: true
